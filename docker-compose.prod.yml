services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./backend/chatbot.db
      - GROQ_API_KEY=${GROQ_API_KEY}
    volumes:
      # Persistent database storage
      - chatbot_data:/app/backend
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - chatbot-network

  data-seeder:
    build: ./backend
    environment:
      - DATABASE_URL=sqlite:///./backend/chatbot.db
    volumes:
      - chatbot_data:/app/data
    command: python populate_sample_data.py
    depends_on:
      backend:
        condition: service_healthy
    restart: "no"
    networks:
      - chatbot-network

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-/api}
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - chatbot-network

volumes:
  chatbot_data:
    driver: local

networks:
  chatbot-network:
    driver: bridge