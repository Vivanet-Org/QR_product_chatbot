version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: chatbot-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-chatbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chatbot_pass}
      POSTGRES_DB: ${POSTGRES_DB:-chatbot_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/populate_sample_data.py:/docker-entrypoint-initdb.d/populate_sample_data.py
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chatbot-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-chatbot_user}:${POSTGRES_PASSWORD:-chatbot_pass}@postgres:5432/${POSTGRES_DB:-chatbot_db}
      GROQ_API_KEY: ${GROQ_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
    volumes:
      - ./backend:/app
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chatbot-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    container_name: chatbot-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - chatbot-network

  qr-generator:
    build:
      context: .
      dockerfile: Dockerfile.qr
    container_name: chatbot-qr-generator
    volumes:
      - ./qr_codes:/app/qr_codes
      - ./generate_qr.py:/app/generate_qr.py
    environment:
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    networks:
      - chatbot-network
    profiles:
      - tools

networks:
  chatbot-network:
    driver: bridge

volumes:
  postgres_data: